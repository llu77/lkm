---
import MainLayout from '@/layouts/MainLayout.astro';

// Check authentication (admin only)
const cookieHeader = Astro.request.headers.get('Cookie');
if (!cookieHeader?.includes('session=')) {
  return Astro.redirect('/auth/login');
}
---

<MainLayout title="ุฅุนุฏุงุฏุงุช ุงูุจุฑูุฏ ุงูุฅููุชุฑููู - SymbolAI">
  <div class="space-y-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold">ุฅุนุฏุงุฏุงุช ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</h1>
        <p class="text-muted-foreground mt-2">ุฅุฏุงุฑุฉ ูุฅุญุตุงุฆูุงุช ูุธุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</p>
      </div>
      <button
        id="test-email-btn"
        class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors font-medium"
      >
        ๐ง ุฅุฑุณุงู ุชุฌุฑูุจู
      </button>
    </div>

    <!-- Email Stats Cards -->
    <div class="grid gap-4 md:grid-cols-4">
      <div class="rounded-lg border bg-card p-4">
        <div class="flex items-center justify-between">
          <h3 class="text-sm font-medium text-muted-foreground">ุฅุฌูุงูู ุงููุฑุณู</h3>
          <svg class="h-4 w-4 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        </div>
        <p class="text-2xl font-bold mt-2 text-green-600" id="stat-sent">0</p>
        <p class="text-xs text-muted-foreground mt-1">ุขุฎุฑ 24 ุณุงุนุฉ</p>
      </div>

      <div class="rounded-lg border bg-card p-4">
        <div class="flex items-center justify-between">
          <h3 class="text-sm font-medium text-muted-foreground">ูุดู ุงูุฅุฑุณุงู</h3>
          <svg class="h-4 w-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-2xl font-bold mt-2 text-red-600" id="stat-failed">0</p>
        <p class="text-xs text-muted-foreground mt-1">ุขุฎุฑ 24 ุณุงุนุฉ</p>
      </div>

      <div class="rounded-lg border bg-card p-4">
        <div class="flex items-center justify-between">
          <h3 class="text-sm font-medium text-muted-foreground">ูุนุฏู ุงูุชุญุฏูุฏ</h3>
          <svg class="h-4 w-4 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-2xl font-bold mt-2 text-yellow-600" id="stat-rate-limited">0</p>
        <p class="text-xs text-muted-foreground mt-1">ุขุฎุฑ 24 ุณุงุนุฉ</p>
      </div>

      <div class="rounded-lg border bg-card p-4">
        <div class="flex items-center justify-between">
          <h3 class="text-sm font-medium text-muted-foreground">ูุนุฏู ุงูุชุณููู</h3>
          <svg class="h-4 w-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-2xl font-bold mt-2 text-blue-600" id="stat-delivery-rate">0%</p>
        <p class="text-xs text-muted-foreground mt-1">ูู ุงููุฑุณูุฉ ุจูุฌุงุญ</p>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="grid gap-4 md:grid-cols-2">
      <div class="rounded-lg border bg-card p-6">
        <h3 class="font-semibold mb-4">ุงูุฅุฑุณุงู ุฎูุงู 24 ุณุงุนุฉ</h3>
        <canvas id="hourly-chart" class="w-full h-64"></canvas>
      </div>

      <div class="rounded-lg border bg-card p-6">
        <h3 class="font-semibold mb-4">ุฃูุซุฑ ุงูุชุฑููุฑุงุช ุงุณุชุฎุฏุงูุงู</h3>
        <div id="trigger-list" class="space-y-3">
          <p class="text-sm text-muted-foreground">ุฌุงุฑู ุงูุชุญููู...</p>
        </div>
      </div>
    </div>

    <!-- Email Logs Table -->
    <div class="rounded-lg border bg-card p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-xl font-semibold">ุณุฌู ุงูุฅุฑุณุงู</h3>
        <div class="flex gap-2">
          <select id="status-filter" class="rounded-md border px-3 py-2 text-sm">
            <option value="">ูู ุงูุญุงูุงุช</option>
            <option value="sent">ูุฑุณู</option>
            <option value="failed">ูุดู</option>
            <option value="queued">ูู ุงูุงูุชุธุงุฑ</option>
            <option value="rate_limited">ูุญุฏุฏ</option>
          </select>
          <select id="trigger-filter" class="rounded-md border px-3 py-2 text-sm">
            <option value="">ูู ุงูุชุฑููุฑุงุช</option>
          </select>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="w-full">
          <thead>
            <tr class="border-b">
              <th class="text-right p-3 font-medium">ุงูุชุงุฑูุฎ</th>
              <th class="text-right p-3 font-medium">ุงููุณุชูู</th>
              <th class="text-right p-3 font-medium">ููุน ุงูุชุฑููุฑ</th>
              <th class="text-right p-3 font-medium">ุงูุญุงูุฉ</th>
              <th class="text-right p-3 font-medium">ุงูุชุณููู</th>
              <th class="text-right p-3 font-medium">ุงูุฑุณุงูุฉ</th>
            </tr>
          </thead>
          <tbody id="logs-table-body">
            <tr>
              <td colspan="6" class="text-center p-8 text-muted-foreground">
                ุฌุงุฑู ุงูุชุญููู...
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="flex items-center justify-between mt-4 pt-4 border-t">
        <p class="text-sm text-muted-foreground" id="pagination-info">ุนุฑุถ 0 ูู 0</p>
        <div class="flex gap-2">
          <button id="prev-page" class="px-3 py-1 border rounded-md hover:bg-gray-50 disabled:opacity-50" disabled>
            ุงูุณุงุจู
          </button>
          <button id="next-page" class="px-3 py-1 border rounded-md hover:bg-gray-50 disabled:opacity-50" disabled>
            ุงูุชุงูู
          </button>
        </div>
      </div>
    </div>

    <!-- Email Settings Form -->
    <div class="rounded-lg border bg-card p-6">
      <h3 class="text-xl font-semibold mb-4">ุฅุนุฏุงุฏุงุช ุงููุธุงู</h3>

      <form id="settings-form" class="space-y-4">
        <div class="grid gap-4 md:grid-cols-2">
          <div>
            <label class="block text-sm font-medium mb-2">ุงูุจุฑูุฏ ุงููุฑุณู</label>
            <input type="email" id="from_email" class="w-full rounded-md border px-3 py-2" placeholder="info@symbolai.net" />
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">ุงุณู ุงููุฑุณู</label>
            <input type="text" id="from_name" class="w-full rounded-md border px-3 py-2" placeholder="SymbolAI" />
          </div>
        </div>

        <div class="grid gap-4 md:grid-cols-2">
          <div>
            <label class="block text-sm font-medium mb-2">ุงูุฑุฏ ุนูู</label>
            <input type="email" id="reply_to" class="w-full rounded-md border px-3 py-2" placeholder="support@symbolai.net" />
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">ุจุฑูุฏ ุงููุฏูุฑ</label>
            <input type="email" id="admin_email" class="w-full rounded-md border px-3 py-2" placeholder="admin@symbolai.net" />
          </div>
        </div>

        <div class="border-t pt-4">
          <h4 class="font-medium mb-3">ุญุฏูุฏ ุงูุฅุฑุณุงู</h4>
          <div class="grid gap-4 md:grid-cols-4">
            <div>
              <label class="block text-sm font-medium mb-2">ุนุงู (ุณุงุนู)</label>
              <input type="number" id="rate_limit_global_hourly" min="0" class="w-full rounded-md border px-3 py-2" placeholder="100" />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">ุนุงู (ูููู)</label>
              <input type="number" id="rate_limit_global_daily" min="0" class="w-full rounded-md border px-3 py-2" placeholder="500" />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">ูุณุชุฎุฏู (ุณุงุนู)</label>
              <input type="number" id="rate_limit_user_hourly" min="0" class="w-full rounded-md border px-3 py-2" placeholder="10" />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">ูุณุชุฎุฏู (ูููู)</label>
              <input type="number" id="rate_limit_user_daily" min="0" class="w-full rounded-md border px-3 py-2" placeholder="30" />
            </div>
          </div>
        </div>

        <div class="flex items-center gap-3">
          <input type="checkbox" id="global_enable" class="rounded" />
          <label for="global_enable" class="text-sm font-medium">ุชูุนูู ูุธุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</label>
        </div>

        <div class="flex justify-end pt-4">
          <button
            type="submit"
            id="save-settings-btn"
            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            ุญูุธ ุงูุฅุนุฏุงุฏุงุช
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Test Email Dialog -->
  <div id="test-email-dialog" class="hidden fixed inset-0 bg-black/50 z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 w-full max-w-lg mx-4">
      <h2 class="text-2xl font-bold mb-4">ุฅุฑุณุงู ุจุฑูุฏ ุชุฌุฑูุจู</h2>

      <form id="test-email-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium mb-2">ุงููุณุชูู *</label>
          <input type="email" id="test-to" required class="w-full rounded-md border px-3 py-2" placeholder="test@example.com" />
        </div>

        <div>
          <label class="block text-sm font-medium mb-2">ุงููุงูุจ *</label>
          <select id="test-template" required class="w-full rounded-md border px-3 py-2">
            <option value="">ุงุฎุชุฑ ูุงูุจ...</option>
            <option value="employee_request_created">ุทูุจ ููุธู ุฌุฏูุฏ</option>
            <option value="employee_request_responded">ุฑุฏ ุนูู ุทูุจ</option>
            <option value="product_order_pending">ุทูุจ ููุชุฌุงุช ูุนูู</option>
            <option value="product_order_approved">ุทูุจ ููุชุฌุงุช ููุงูู ุนููู</option>
            <option value="product_order_rejected">ุทูุจ ููุชุฌุงุช ูุฑููุถ</option>
            <option value="product_order_completed">ุทูุจ ููุชุฌุงุช ููุชูู</option>
            <option value="payroll_generated">ูุดู ุฑุงุชุจ</option>
            <option value="bonus_approved">ููุงูุฃุฉ ููุงูู ุนูููุง</option>
            <option value="revenue_mismatch">ุชุญุฐูุฑ ุฅูุฑุงุฏ ุบูุฑ ูุชุทุงุจู</option>
            <option value="large_expense">ุชูุจูู ูุตุฑูู ูุจูุฑ</option>
          </select>
        </div>

        <div class="flex gap-3 justify-end pt-4">
          <button
            type="button"
            id="cancel-test-btn"
            class="px-4 py-2 border rounded-md hover:bg-gray-50"
          >
            ุฅูุบุงุก
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            ุฅุฑุณุงู
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <script>
    interface EmailLog {
      id: string;
      to_email: string;
      trigger_type: string;
      status: string;
      delivery_status: string;
      error_message?: string;
      created_at: string;
      delivered_at?: string;
    }

    interface EmailStats {
      total: number;
      sent: number;
      failed: number;
      queued: number;
      rate_limited: number;
      delivery: {
        total: number;
        delivered: number;
        bounced: number;
        complained: number;
        rate: string;
      };
      hourlyBreakdown: any[];
      triggerCounts: any[];
    }

    let currentPage = 1;
    const pageSize = 10;
    let totalLogs = 0;
    let currentFilters = { status: '', triggerType: '' };
    let hourlyChart: any;

    // Load initial data
    async function loadStats() {
      try {
        const response = await fetch('/api/email/logs/stats?hours=24');
        const data = await response.json();

        if (data.success) {
          updateStatsCards(data.stats);
          renderHourlyChart(data.stats.hourlyBreakdown);
          renderTriggerList(data.stats.triggerCounts);
        }
      } catch (error) {
        console.error('Failed to load stats:', error);
      }
    }

    function updateStatsCards(stats: EmailStats) {
      document.getElementById('stat-sent')!.textContent = stats.sent.toString();
      document.getElementById('stat-failed')!.textContent = stats.failed.toString();
      document.getElementById('stat-rate-limited')!.textContent = stats.rate_limited.toString();
      document.getElementById('stat-delivery-rate')!.textContent = stats.delivery.rate + '%';
    }

    function renderHourlyChart(data: any[]) {
      const ctx = document.getElementById('hourly-chart') as HTMLCanvasElement;

      if (hourlyChart) {
        hourlyChart.destroy();
      }

      hourlyChart = new (window as any).Chart(ctx, {
        type: 'line',
        data: {
          labels: data.map(d => new Date(d.hour).toLocaleTimeString('ar-EG', { hour: '2-digit' })),
          datasets: [
            {
              label: 'ูุฑุณู',
              data: data.map(d => d.sent),
              borderColor: 'rgb(34, 197, 94)',
              backgroundColor: 'rgba(34, 197, 94, 0.1)',
              tension: 0.3
            },
            {
              label: 'ูุดู',
              data: data.map(d => d.failed),
              borderColor: 'rgb(239, 68, 68)',
              backgroundColor: 'rgba(239, 68, 68, 0.1)',
              tension: 0.3
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              rtl: true,
              textDirection: 'rtl'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }

    function renderTriggerList(triggers: any[]) {
      const container = document.getElementById('trigger-list')!;

      if (triggers.length === 0) {
        container.innerHTML = '<p class="text-sm text-muted-foreground">ูุง ุชูุฌุฏ ุจูุงูุงุช</p>';
        return;
      }

      container.innerHTML = triggers.slice(0, 5).map(t => `
        <div class="flex items-center justify-between p-3 rounded-lg bg-gray-50">
          <span class="text-sm font-medium">${translateTrigger(t.trigger_type)}</span>
          <span class="text-sm font-bold text-blue-600">${t.count}</span>
        </div>
      `).join('');

      // Populate trigger filter dropdown
      const triggerFilter = document.getElementById('trigger-filter') as HTMLSelectElement;
      const existingOptions = Array.from(triggerFilter.options).map(o => o.value);

      triggers.forEach(t => {
        if (!existingOptions.includes(t.trigger_type)) {
          const option = document.createElement('option');
          option.value = t.trigger_type;
          option.textContent = translateTrigger(t.trigger_type);
          triggerFilter.appendChild(option);
        }
      });
    }

    function translateTrigger(type: string): string {
      const translations: Record<string, string> = {
        'employee_request_created': 'ุทูุจ ููุธู ุฌุฏูุฏ',
        'employee_request_responded': 'ุฑุฏ ุนูู ุทูุจ',
        'product_order_pending': 'ุทูุจ ููุชุฌุงุช ูุนูู',
        'product_order_approved': 'ุทูุจ ููุงูู ุนููู',
        'product_order_rejected': 'ุทูุจ ูุฑููุถ',
        'product_order_completed': 'ุทูุจ ููุชูู',
        'payroll_generated': 'ูุดู ุฑุงุชุจ',
        'bonus_approved': 'ููุงูุฃุฉ',
        'revenue_mismatch': 'ุฅูุฑุงุฏ ุบูุฑ ูุชุทุงุจู',
        'large_expense': 'ูุตุฑูู ูุจูุฑ',
        'backup_completed': 'ูุณุฎ ุงุญุชูุงุทู',
        'backup_failed': 'ูุดู ูุณุฎ ุงุญุชูุงุทู',
        'payroll_reminder': 'ุชุฐููุฑ ุฑุงุชุจ',
        'bonus_reminder': 'ุชุฐููุฑ ููุงูุฃุฉ',
        'manual_send': 'ุฅุฑุณุงู ูุฏูู'
      };
      return translations[type] || type;
    }

    async function loadLogs() {
      try {
        const params = new URLSearchParams({
          page: currentPage.toString(),
          limit: pageSize.toString(),
          ...(currentFilters.status && { status: currentFilters.status }),
          ...(currentFilters.triggerType && { triggerType: currentFilters.triggerType })
        });

        const response = await fetch(`/api/email/logs/list?${params}`);
        const data = await response.json();

        if (data.success) {
          renderLogsTable(data.logs);
          totalLogs = data.total;
          updatePagination();
        }
      } catch (error) {
        console.error('Failed to load logs:', error);
      }
    }

    function renderLogsTable(logs: EmailLog[]) {
      const tbody = document.getElementById('logs-table-body')!;

      if (logs.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center p-8 text-muted-foreground">
              ูุง ุชูุฌุฏ ุณุฌูุงุช
            </td>
          </tr>
        `;
        return;
      }

      tbody.innerHTML = logs.map(log => `
        <tr class="border-b hover:bg-gray-50">
          <td class="p-3 text-sm">${new Date(log.created_at).toLocaleString('ar-EG')}</td>
          <td class="p-3 text-sm">${log.to_email}</td>
          <td class="p-3 text-sm">${translateTrigger(log.trigger_type)}</td>
          <td class="p-3">
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(log.status)}">
              ${translateStatus(log.status)}
            </span>
          </td>
          <td class="p-3">
            ${log.delivery_status ? `
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getDeliveryColor(log.delivery_status)}">
                ${translateDeliveryStatus(log.delivery_status)}
              </span>
            ` : '<span class="text-xs text-muted-foreground">-</span>'}
          </td>
          <td class="p-3 text-sm">
            ${log.error_message ? `<span class="text-red-600 text-xs">${log.error_message}</span>` : '-'}
          </td>
        </tr>
      `).join('');
    }

    function getStatusColor(status: string): string {
      const colors: Record<string, string> = {
        'sent': 'bg-green-100 text-green-800',
        'failed': 'bg-red-100 text-red-800',
        'queued': 'bg-blue-100 text-blue-800',
        'rate_limited': 'bg-yellow-100 text-yellow-800'
      };
      return colors[status] || 'bg-gray-100 text-gray-800';
    }

    function getDeliveryColor(status: string): string {
      const colors: Record<string, string> = {
        'delivered': 'bg-green-100 text-green-800',
        'bounced': 'bg-red-100 text-red-800',
        'complained': 'bg-orange-100 text-orange-800'
      };
      return colors[status] || 'bg-gray-100 text-gray-800';
    }

    function translateStatus(status: string): string {
      const translations: Record<string, string> = {
        'sent': 'ูุฑุณู',
        'failed': 'ูุดู',
        'queued': 'ูู ุงูุงูุชุธุงุฑ',
        'rate_limited': 'ูุญุฏุฏ'
      };
      return translations[status] || status;
    }

    function translateDeliveryStatus(status: string): string {
      const translations: Record<string, string> = {
        'delivered': 'ุชู ุงูุชุณููู',
        'bounced': 'ูุฑุชุฏ',
        'complained': 'ุดููู'
      };
      return translations[status] || status;
    }

    function updatePagination() {
      const start = (currentPage - 1) * pageSize + 1;
      const end = Math.min(currentPage * pageSize, totalLogs);

      document.getElementById('pagination-info')!.textContent = `ุนุฑุถ ${start}-${end} ูู ${totalLogs}`;

      (document.getElementById('prev-page') as HTMLButtonElement).disabled = currentPage === 1;
      (document.getElementById('next-page') as HTMLButtonElement).disabled = end >= totalLogs;
    }

    async function loadSettings() {
      try {
        const response = await fetch('/api/email/settings/get');
        const data = await response.json();

        if (data.success) {
          const settings = data.settings;
          (document.getElementById('from_email') as HTMLInputElement).value = settings.from_email || '';
          (document.getElementById('from_name') as HTMLInputElement).value = settings.from_name || '';
          (document.getElementById('reply_to') as HTMLInputElement).value = settings.reply_to || '';
          (document.getElementById('admin_email') as HTMLInputElement).value = settings.admin_email || '';
          (document.getElementById('rate_limit_global_hourly') as HTMLInputElement).value = settings.rate_limit_global_hourly || '';
          (document.getElementById('rate_limit_global_daily') as HTMLInputElement).value = settings.rate_limit_global_daily || '';
          (document.getElementById('rate_limit_user_hourly') as HTMLInputElement).value = settings.rate_limit_user_hourly || '';
          (document.getElementById('rate_limit_user_daily') as HTMLInputElement).value = settings.rate_limit_user_daily || '';
          (document.getElementById('global_enable') as HTMLInputElement).checked = settings.global_enable === '1' || settings.global_enable === 'true';
        }
      } catch (error) {
        console.error('Failed to load settings:', error);
      }
    }

    // Event listeners
    document.getElementById('prev-page')?.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        loadLogs();
      }
    });

    document.getElementById('next-page')?.addEventListener('click', () => {
      if (currentPage * pageSize < totalLogs) {
        currentPage++;
        loadLogs();
      }
    });

    document.getElementById('status-filter')?.addEventListener('change', (e) => {
      currentFilters.status = (e.target as HTMLSelectElement).value;
      currentPage = 1;
      loadLogs();
    });

    document.getElementById('trigger-filter')?.addEventListener('change', (e) => {
      currentFilters.triggerType = (e.target as HTMLSelectElement).value;
      currentPage = 1;
      loadLogs();
    });

    document.getElementById('settings-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const settings = {
        from_email: (document.getElementById('from_email') as HTMLInputElement).value,
        from_name: (document.getElementById('from_name') as HTMLInputElement).value,
        reply_to: (document.getElementById('reply_to') as HTMLInputElement).value,
        admin_email: (document.getElementById('admin_email') as HTMLInputElement).value,
        rate_limit_global_hourly: (document.getElementById('rate_limit_global_hourly') as HTMLInputElement).value,
        rate_limit_global_daily: (document.getElementById('rate_limit_global_daily') as HTMLInputElement).value,
        rate_limit_user_hourly: (document.getElementById('rate_limit_user_hourly') as HTMLInputElement).value,
        rate_limit_user_daily: (document.getElementById('rate_limit_user_daily') as HTMLInputElement).value,
        global_enable: (document.getElementById('global_enable') as HTMLInputElement).checked ? '1' : '0'
      };

      try {
        const response = await fetch('/api/email/settings/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ settings })
        });

        const data = await response.json();

        if (data.success) {
          alert('ุชู ุญูุธ ุงูุฅุนุฏุงุฏุงุช ุจูุฌุงุญ');
        } else {
          alert('ูุดู ุญูุธ ุงูุฅุนุฏุงุฏุงุช: ' + data.error);
        }
      } catch (error) {
        console.error('Failed to save settings:', error);
        alert('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูุฅุนุฏุงุฏุงุช');
      }
    });

    // Test email dialog
    document.getElementById('test-email-btn')?.addEventListener('click', () => {
      document.getElementById('test-email-dialog')?.classList.remove('hidden');
    });

    document.getElementById('cancel-test-btn')?.addEventListener('click', () => {
      document.getElementById('test-email-dialog')?.classList.add('hidden');
    });

    document.getElementById('test-email-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const to = (document.getElementById('test-to') as HTMLInputElement).value;
      const templateId = (document.getElementById('test-template') as HTMLSelectElement).value;

      try {
        const response = await fetch('/api/email/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            to,
            templateId,
            variables: {
              employeeName: 'ููุธู ุชุฌุฑูุจู',
              requestType: 'ุงุฎุชุจุงุฑ',
              requestDate: new Date().toLocaleDateString('ar-EG'),
              requestDetails: 'ูุฐุง ุจุฑูุฏ ุชุฌุฑูุจู ููุงุฎุชุจุงุฑ',
              requestId: 'TEST-001',
              branchId: 'TEST'
            },
            priority: 'high'
          })
        });

        const data = await response.json();

        if (data.success) {
          alert('ุชู ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุชุฌุฑูุจู ุจูุฌุงุญ');
          document.getElementById('test-email-dialog')?.classList.add('hidden');
          loadLogs(); // Reload logs
        } else {
          alert('ูุดู ุงูุฅุฑุณุงู: ' + data.error);
        }
      } catch (error) {
        console.error('Failed to send test email:', error);
        alert('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุฅุฑุณุงู');
      }
    });

    // Load data on page load
    loadStats();
    loadLogs();
    loadSettings();

    // Auto-refresh stats every 30 seconds
    setInterval(loadStats, 30000);
  </script>
</MainLayout>
