---
alwaysApply: true
description: Comprehensive deployment troubleshooting guide based on real errors encountered
---

# Deployment Troubleshooting - Lessons from Real Production Issues

This rule is based on **actual errors** we encountered and resolved during deployment of the LKM HR System to Cloudflare Pages with Convex backend.

## üéØ Critical Understanding: The Three-Layer Architecture

```
Browser (Frontend) ‚Üê WebSocket ‚Üí Convex Backend ‚Üê Config ‚Üí Cloudflare Pages
     ‚Üì                              ‚Üì                        ‚Üì
  React Hooks              Queries/Mutations         Build & Deploy
  useConvexAuth()         ctx.auth.getUserIdentity()  wrangler.toml
```

**Key Insight**: Each layer has independent configuration and can fail independently!

---

## üî¥ Error Category 1: Cloudflare Pages Configuration

### Error: "Configuration file does not support build"

**What it means**: 
- Cloudflare Pages `wrangler.toml` ‚â† Cloudflare Workers `wrangler.toml`
- The `[build]` section is **only** for Workers
- Pages uses different configuration format

**Root Cause Analysis**:
```toml
# ‚ùå This fails on Pages:
[build]
command = "npm run build"

# ‚úÖ Pages expects:
name = "your-project"
pages_build_output_dir = "dist"
compatibility_date = "2025-01-01"
```

**Why This Happens**:
1. Developers copy configs from Workers examples
2. Documentation sometimes mixed between Workers and Pages
3. Error message unclear about which platform

**The Fix**: [wrangler.toml](mdc:wrangler.toml)
- Remove any `[build]` section
- Add `name` field (required for Pages)
- Use `pages_build_output_dir` instead of `build.output`

**Prevention**:
- Always check: "for Pages" vs "for Workers" in docs
- Start with minimal config, add incrementally
- Test deploy after each config change

---

### Error: "Missing top-level field name"

**What it means**: Pages requires `name` field, even though some docs say "optional"

**Root Cause**: 
- "optional" for CLI usage ‚â† "optional" for dashboard deploys
- Pages validation stricter than Workers

**The Fix**:
```toml
name = "lkm-hr-system"  # Required!
```

**Lesson**: Don't trust "optional" - test to verify

---

### Error: "pnpm-lock.yaml is not up to date"

**What it means**:
- package.json changed
- Lockfile not regenerated
- Cloudflare uses `--frozen-lockfile` (strict mode)

**Root Cause Analysis**:
```
npm install ‚Üí updates package-lock.json ‚úì
            ‚Üí does NOT update pnpm-lock.yaml ‚ùå
‚Üì
Cloudflare uses pnpm ‚Üí sees mismatch ‚Üí fails
```

**The Fix**:
```bash
# If project uses pnpm (check for pnpm-lock.yaml):
pnpm install --no-frozen-lockfile
git add pnpm-lock.yaml
git commit -m "fix: update pnpm lockfile"
```

**Prevention**:
- Check which package manager project uses
- **Never mix** npm/pnpm/yarn in same project
- Always commit lockfile updates
- Set up pre-commit hooks to check

**Files**: [package.json](mdc:package.json), [pnpm-lock.yaml](mdc:pnpm-lock.yaml)

---

## üî¥ Error Category 2: Vite Plugin Issues

### Error: "Failed to load module script: Expected JavaScript but got text/html"

**What it means**:
- A Vite plugin tries to load external JavaScript
- Server returns 404 HTML error page instead
- Browser rejects due to wrong MIME type

**Root Cause Analysis**:
```typescript
// vite.config.ts
plugins: [hercules()]
‚Üì
Plugin tries to load: __hercules_error_handler.js
‚Üì
VITE_HERCULES_WEBSITE_ID not set
‚Üì
Server returns: 404 HTML page
‚Üì
Browser expects: JavaScript (MIME: application/javascript)
‚Üì
Error: "Expected JavaScript but got text/html"
```

**The Fix**: [vite.config.ts](mdc:vite.config.ts)
```typescript
// ‚úÖ Disable plugin if env var not set:
plugins: [
  react(),
  tailwindcss(),
  // hercules() // Disabled when VITE_HERCULES_WEBSITE_ID not configured
]
```

**Lesson**: External plugins = external dependencies = potential failures

---

## üî¥ Error Category 3: Authentication System

### Error: "No authority or metadataUrl configured on settings"

**What it means**:
- OIDC client tries to fetch provider metadata
- `authority` URL is undefined or invalid
- Cannot proceed with authentication flow

**Root Cause Analysis**:
```typescript
// auth.tsx
authority: import.meta.env.VITE_OIDC_AUTHORITY || "https://example.com"
‚Üì
Environment variable not set
‚Üì
Falls back to "example.com"
‚Üì
example.com is NOT an OIDC provider!
‚Üì
Fetches: https://example.com/.well-known/openid-configuration
‚Üì
Returns: 404 or wrong response
‚Üì
Error: "No authority configured"
```

**Why This is Dangerous**:
- Invalid fallback silently accepted
- Error only appears at runtime
- Users see broken authentication

**The Fix**: [src/components/providers/auth.tsx](mdc:src/components/providers/auth.tsx)
```typescript
// ‚úÖ Check before initializing:
const isOIDCConfigured = 
  import.meta.env.VITE_OIDC_AUTHORITY && 
  import.meta.env.VITE_OIDC_CLIENT_ID;

if (!isOIDCConfigured) {
  console.warn("OIDC not configured");
  return <>{children}</>; // Skip auth provider
}
```

**Better Solution**: Use **Convex Auth** instead!
- Built-in to Convex
- No external OIDC provider needed
- Works with CDN (Cloudflare Pages)

**Files**: [convex/auth.ts](mdc:convex/auth.ts)

---

### Error: "Certificate ERR_CERT_COMMON_NAME_INVALID"

**What it means**: 
- HTTPS request to invalid/unreachable domain
- SSL certificate mismatch
- Often follows from wrong OIDC authority

**Root Cause**: Invalid fallback URL like `https://example.com` or `https://your-provider.com`

**The Fix**: Use valid OIDC provider or switch to Convex Auth

---

## üî¥ Error Category 4: Convex Backend Issues

### Error: "Query function in Node.js - Only actions allowed"

**What it means**:
```typescript
"use node";  // Enables Node.js runtime

export const myQuery = query({...}); // ‚ùå INVALID!
```

**Root Cause Analysis**:
- Convex has **two runtimes**:
  1. V8 Isolate (fast, limited) - for queries/mutations
  2. Node.js (slower, full features) - for actions only
- `"use node"` directive switches to Node.js runtime
- Queries/mutations **must** use V8 Isolate for speed

**Why This Restriction Exists**:
- Queries are reactive ‚Üí run frequently ‚Üí must be fast
- Node.js has ~100ms overhead
- V8 Isolate runs in <10ms
- Mixing them would slow down reactive queries

**The Fix**:
```typescript
// ‚úÖ Separate files:
// queries.ts (no "use node")
export const myQuery = query({...});

// actions.ts
"use node";
export const myAction = action({...});
```

**Or Remove "use node"**:
```typescript
// If you don't need Node.js features:
// Remove "use node" directive
export const myQuery = query({...});
export const myAction = action({...}); // Still works without "use node"
```

**Files**: [convex/scheduledEmails.ts](mdc:convex/scheduledEmails.ts), [convex/payrollEmail.ts](mdc:convex/payrollEmail.ts)

---

### Error: "File name must be alphanumeric"

**What it means**:
```
auth-helpers.ts ‚ùå
authHelpers.ts ‚úÖ
```

**Convex File Naming Rules**:
- ‚úÖ Letters (a-z, A-Z)
- ‚úÖ Numbers (0-9)
- ‚úÖ Underscores (_)
- ‚úÖ Periods (.)
- ‚ùå Hyphens (-)
- ‚ùå Spaces
- ‚ùå Special characters

**Why**: Convex generates JavaScript module names from file paths

**The Fix**: Rename files to use camelCase or snake_case

---

### Error: "auth config file missing default export"

**What it means**: Convex expects **two different auth configs**:
1. Legacy OIDC: `export default { providers: [...] }`
2. Convex Auth: `export const { auth } = convexAuth({...})`

**Root Cause**: Trying to use both in same file

**The Fix**: Separate files
- [convex/auth.config.js](mdc:convex/auth.config.js) - Legacy OIDC (empty)
- [convex/auth.ts](mdc:convex/auth.ts) - Convex Auth (active)

---

### Error: "AUTH_SECRET environment variable not set"

**What it means**: Convex Auth requires multiple environment variables

**Hidden Complexity**:
```
providers: [Anonymous]
‚Üì
Requires:
- AUTH_SECRET (primary key)
- AUTH_SECRET_1..10 (key rotation)
- AUTH_URL (callback base)
- AUTH_REDIRECT_PROXY_URL
- AUTH_ANONYMOUS_ID
- AUTH_ANONYMOUS_SECRET
- AUTH_ANONYMOUS_ISSUER
- ... and more
```

**Why So Many**:
- Security: Key rotation
- Multi-provider support
- JWT signing keys
- Callback URL configuration

**The Fix**:
```bash
npx convex env set AUTH_SECRET "your-secret-key-min-32-chars"
npx convex env set AUTH_URL "https://your-deployment.convex.site"
# ... etc
```

**Better**: Use official setup:
```bash
npx @convex-dev/auth
```

---

## üî¥ Error Category 5: TypeScript Issues

### Error: "Type 'null' is not assignable to 'string | undefined'"

**What it means**:
```typescript
name: v.optional(v.string()) // Schema
‚Üì
TypeScript type: string | undefined
‚Üì
null is NOT undefined!
```

**Root Cause**:
- JavaScript uses `null` for "empty"
- TypeScript uses `undefined` for "optional"
- Convex follows TypeScript convention

**The Fix**:
```typescript
// ‚ùå Wrong:
{ name: null, email: null }

// ‚úÖ Right:
{ /* omit optional fields */ }
// or
{ name: undefined, email: undefined }
```

**Deep Understanding**:
```typescript
// Insert: omit optional fields
await ctx.db.insert("users", {
  username: "john", // required
  // name not included = undefined
});

// Patch: use undefined to clear
await ctx.db.patch(userId, {
  name: undefined, // clears the field
});
```

---

## üî¥ Error Category 6: Race Conditions (CRITICAL SECURITY)

### Error: Silent - Data exposed to unauthenticated users

**What it means**:
```typescript
const { isAuthenticated } = useConvexAuth(); // Async!
const data = useQuery(api.secrets.get, {}); // Starts immediately!

// Timeline:
t=0ms:  useQuery sends request
t=50ms: isAuthenticated = false (too late!)
t=100ms: Query returns secret data (exposed!)
```

**Root Cause**: `useConvexAuth()` is **asynchronous** but `useQuery()` starts **synchronously**

**Why This is Critical**:
- Data exposed before auth check completes
- Silent security vulnerability
- Hard to detect in testing
- Only shows under certain network conditions

**The Fix**: [src/hooks/use-auth.ts](mdc:src/hooks/use-auth.ts)
```typescript
// ‚úÖ Always use "skip" pattern:
const { isAuthenticated } = useConvexAuth();
const data = useQuery(
  api.sensitiveData.get,
  isAuthenticated ? { id: "123" } : "skip"
);
```

**Better**: Create safe wrapper: [src/hooks/use-query-with-status.ts](mdc:src/hooks/use-query-with-status.ts)
```typescript
export function useAuthenticatedQuery(query, args) {
  const { isAuthenticated } = useConvexAuth();
  return useQuery(query, isAuthenticated ? args : "skip");
}
```

**Defense in Depth**: Always validate in backend too!
```typescript
export const getData = query({
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new ConvexError("Unauthenticated");
    }
    // Now safe
  },
});
```

---

## üõ°Ô∏è Security Checklist

### Frontend (React):
- [ ] Always check `isLoading` before `isAuthenticated`
- [ ] Always use `"skip"` when `!isAuthenticated`
- [ ] Never assume auth from parent components
- [ ] Use `useAuthenticatedQuery` wrapper

### Backend (Convex):
- [ ] Every public query/mutation validates `ctx.auth.getUserIdentity()`
- [ ] Use `internalQuery`/`internalMutation` for sensitive operations
- [ ] Check user roles/permissions where needed
- [ ] Never trust client-side auth alone

### Configuration:
- [ ] [convex/auth.ts](mdc:convex/auth.ts) configured correctly
- [ ] [convex/schema.ts](mdc:convex/schema.ts) includes `authTables`
- [ ] [convex/http.ts](mdc:convex/http.ts) exposes auth routes
- [ ] Environment variables set in both Convex and Cloudflare

---

## üîß Deployment Environment Variables

### Convex Backend:
```bash
# Auth (if using Convex Auth):
AUTH_SECRET=<random-32-char-string>
AUTH_URL=https://your-deployment.convex.site
AUTH_REDIRECT_PROXY_URL=https://your-app-domain.com

# App-specific:
RESEND_API_KEY=<if-using-email>
PDFCO_API_KEY=<if-using-pdf>
```

### Cloudflare Pages:
```bash
# Required:
VITE_CONVEX_URL=https://your-deployment.convex.cloud

# Optional:
VITE_HERCULES_WEBSITE_ID=<if-using-hercules>
```

**Critical**: All client-side vars MUST be prefixed with `VITE_`

---

## üìã Pre-Deployment Checklist

### Before Every Deploy:

1. **Lockfiles Synced**:
   ```bash
   # Check which package manager:
   ls pnpm-lock.yaml  # pnpm
   ls package-lock.json  # npm
   ls yarn.lock  # yarn
   
   # Use the correct one!
   pnpm install  # if pnpm-lock.yaml exists
   ```

2. **Build Succeeds Locally**:
   ```bash
   npm run build
   # Check dist/ folder exists
   ls dist/index.html
   ```

3. **Convex Deployed**:
   ```bash
   npx convex deploy
   # Or keep npx convex dev running
   ```

4. **Environment Variables Set**:
   - Convex Dashboard ‚Üí Settings ‚Üí Environment Variables
   - Cloudflare Dashboard ‚Üí Pages ‚Üí Settings ‚Üí Environment Variables

5. **Configuration Files Valid**:
   - [wrangler.toml](mdc:wrangler.toml) - Pages-compatible
   - [vite.config.ts](mdc:vite.config.ts) - Plugins configured
   - [convex/auth.ts](mdc:convex/auth.ts) - Auth setup
   - [convex/schema.ts](mdc:convex/schema.ts) - Includes authTables

---

## üéØ Common Patterns & Solutions

### Pattern 1: Custom Authenticated Functions

**Problem**: Repeating auth checks in every function

**Solution**: [convex/customFunctions.ts](mdc:convex/customFunctions.ts)
```typescript
import { authenticatedQuery } from "./customFunctions";

export const getMyData = authenticatedQuery({
  args: {},
  handler: async (ctx, args) => {
    // ctx.user automatically available!
    return { userId: ctx.user._id };
  },
});
```

### Pattern 2: Safe Query Hooks

**Problem**: Race conditions with authentication

**Solution**: [src/hooks/use-query-with-status.ts](mdc:src/hooks/use-query-with-status.ts)
```typescript
import { useAuthenticatedQuery } from "@/hooks/use-query-with-status";

const data = useAuthenticatedQuery(api.data.get, { id: "123" });
// Automatically skipped if not authenticated
```

### Pattern 3: Environment Guards

**Problem**: Dangerous functions in production

**Solution**: [convex/testingHelpers.ts](mdc:convex/testingHelpers.ts)
```typescript
if (process.env.IS_PROD) {
  throw new Error("Cannot run in production!");
}
```

---

## üìö Related Documentation

- [LESSONS_LEARNED_FROM_ERRORS.md](mdc:LESSONS_LEARNED_FROM_ERRORS.md) - Deep analysis of all errors
- [CLOUDFLARE_PAGES_SETUP.md](mdc:CLOUDFLARE_PAGES_SETUP.md) - Complete deployment guide
- [CONVEX_AUTH_IMPLEMENTATION.md](mdc:CONVEX_AUTH_IMPLEMENTATION.md) - Auth setup guide
- [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) - Testing patterns

---

## üö® Emergency Debugging

### If site broken after deploy:

1. **Check Cloudflare Build Logs**:
   - Dashboard ‚Üí Pages ‚Üí Deployments ‚Üí View logs
   - Look for first error

2. **Check Convex Dashboard**:
   - https://dashboard.convex.dev/
   - Logs tab ‚Üí Filter by errors
   - Settings ‚Üí Environment Variables

3. **Check Browser Console**:
   - F12 ‚Üí Console tab
   - Network tab ‚Üí Failed requests
   - Look for CORS, 404, or auth errors

4. **Rollback if Needed**:
   - Cloudflare ‚Üí Deployments ‚Üí Previous ‚Üí Rollback
   - Debug in separate branch

---

## üéì Key Learnings

1. **Configuration is Platform-Specific** - Pages ‚â† Workers
2. **Lockfiles Must Match** - Use one package manager
3. **External Dependencies = Risk** - Minimize plugins
4. **Authentication Has 3 Layers** - Secure all of them
5. **Race Conditions are Real** - Always use "skip"
6. **Beta Features Need Care** - Expect hidden complexity
7. **Error Messages are Clues** - Read them carefully
8. **Test Incrementally** - One change at a time
9. **Documentation Saves Time** - Write it down!
10. **TypeScript Strictness** - null ‚â† undefined

---

**Generated from**: 3 hours of deep troubleshooting, 10 error categories, 50+ commits
**Status**: Battle-tested and production-ready
**Last Updated**: October 25, 2025
