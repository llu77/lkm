---
description: OIDC authentication flow and configuration
globs: src/components/providers/auth.tsx,src/hooks/use-auth.ts,src/pages/auth/Callback.tsx
---

# OIDC Authentication Configuration

## Authentication Flow

### Provider Setup
**File**: [src/components/providers/auth.tsx](mdc:src/components/providers/auth.tsx)

The `AuthProvider` wraps the app and configures OIDC:
```typescript
const AUTH_CONFIG: AuthProviderProps = {
  authority: import.meta.env.VITE_HERCULES_OIDC_AUTHORITY!,
  client_id: import.meta.env.VITE_HERCULES_OIDC_CLIENT_ID!,
  prompt: import.meta.env.VITE_HERCULES_OIDC_PROMPT ?? "select_account",
  response_type: import.meta.env.VITE_HERCULES_OIDC_RESPONSE_TYPE ?? "code",
  scope: import.meta.env.VITE_HERCULES_OIDC_SCOPE ?? "openid profile email",
  redirect_uri: import.meta.env.VITE_HERCULES_OIDC_REDIRECT_URI ?? `${window.location.origin}/auth/callback`,
};
```

### Required Environment Variables
- `VITE_HERCULES_OIDC_AUTHORITY` - OIDC provider URL (e.g., `https://accounts.google.com`)
- `VITE_HERCULES_OIDC_CLIENT_ID` - OAuth2 client ID from your provider

### Optional Environment Variables (with defaults)
- `VITE_HERCULES_OIDC_PROMPT` - Default: `"select_account"`
- `VITE_HERCULES_OIDC_RESPONSE_TYPE` - Default: `"code"`
- `VITE_HERCULES_OIDC_SCOPE` - Default: `"openid profile email"`
- `VITE_HERCULES_OIDC_REDIRECT_URI` - Default: `${origin}/auth/callback`

## Authentication Hooks

### useAuth()
**File**: [src/hooks/use-auth.ts](mdc:src/hooks/use-auth.ts)

Wrapper around `react-oidc-context` with custom token fetching:
```typescript
const { user, isLoading, isAuthenticated, signinRedirect, signoutRedirect } = useAuth();
```

**Key properties**:
- `user` - User profile data (id_token, profile)
- `isAuthenticated` - Boolean auth state
- `isLoading` - Loading state
- `fetchAccessToken()` - Get current access token
- `signinRedirect()` - Initiate login flow
- `signoutRedirect()` - Initiate logout flow

### useUser()
**File**: [src/hooks/use-auth.ts](mdc:src/hooks/use-auth.ts)

Higher-level hook with automatic redirect:
```typescript
const { id, name, email, avatar, isAuthenticated } = useUser({ 
  shouldRedirect: true // Auto-redirect if not authenticated
});
```

## Auth Callback Route

**File**: [src/pages/auth/Callback.tsx](mdc:src/pages/auth/Callback.tsx)

Handles OIDC redirect after login:
1. User logs in with provider
2. Provider redirects to `/auth/callback?code=...`
3. `react-oidc-context` exchanges code for tokens
4. Callback page redirects to home `/`

## Common Authentication Errors

### Error: "No authority or metadataUrl configured on settings"
**Stack trace shows**: `dG.getMetadata` → `getAuthorizationEndpoint` → `signinRedirect`
**Cause**: `VITE_HERCULES_OIDC_AUTHORITY` is undefined
**Fix**: Set environment variable in:
- Local: `.env.local`
- Production: Cloudflare Pages environment variables

### Error: Login redirects to wrong URL
**Cause**: `VITE_HERCULES_OIDC_REDIRECT_URI` misconfigured
**Fix**: Ensure redirect URI matches:
- OAuth2 provider allowed redirect URIs
- Format: `https://your-domain.pages.dev/auth/callback`
- Default auto-constructs: `${window.location.origin}/auth/callback`

### Error: "Invalid client_id"
**Cause**: Wrong or missing `VITE_HERCULES_OIDC_CLIENT_ID`
**Fix**: Verify client ID from OAuth2 provider dashboard

### Error: Infinite redirect loop
**Cause**: `useUser({ shouldRedirect: true })` on callback route
**Fix**: Never use `shouldRedirect: true` on `/auth/callback` or authenticated routes

## Authentication Integration with Convex

The auth token is passed to Convex for backend validation:
1. `useAuth()` provides `fetchAccessToken()`
2. Convex client uses token for authenticated requests
3. Backend validates token and authorizes actions

**Important**: Convex backend must be configured to accept tokens from your OIDC provider.

## Testing Authentication

### Local Development
1. Set OIDC variables in `.env.local`
2. Start dev server: `npm run dev`
3. Click sign-in button
4. Should redirect to OIDC provider
5. After login, redirects to `/auth/callback`
6. Finally redirects to home `/`

### Production Testing
1. Deploy to Cloudflare Pages with env vars set
2. Visit your Pages URL
3. Test login flow
4. Check browser console for errors
5. Verify token in DevTools → Application → Storage

## Security Considerations

- **Tokens are client-side**: Don't store sensitive data in user profile
- **Backend validation required**: Always validate tokens on Convex backend
- **HTTPS required**: OIDC requires secure connections in production
- **Redirect URI allowlist**: Configure allowed redirects in OAuth provider
