---
alwaysApply: true
---

# LKM HR System - Project Structure

## Tech Stack
- **Frontend**: React 19 + TypeScript + Vite
- **Backend**: Convex (serverless)
- **Authentication**: OIDC (react-oidc-context)
- **UI Library**: Radix UI + Tailwind CSS v4
- **Deployment**: Cloudflare Pages
- **Analytics**: Hercules (optional)

## Project Layout

### Core Configuration
- [package.json](mdc:package.json) - Dependencies and scripts
- [vite.config.ts](mdc:vite.config.ts) - Vite bundler configuration
- [wrangler.toml](mdc:wrangler.toml) - Cloudflare Pages configuration
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [.node-version](mdc:.node-version) - Node.js version (20)

### Entry Points
- [index.html](mdc:index.html) - HTML entry point with OIDC meta tags
- [src/main.tsx](mdc:src/main.tsx) - React app entry point
- [src/App.tsx](mdc:src/App.tsx) - Root component with routing

### Source Structure (`src/`)

#### Components
- `src/components/ui/` - Reusable UI components (buttons, forms, etc.)
- `src/components/providers/` - React context providers
  - [auth.tsx](mdc:src/components/providers/auth.tsx) - OIDC authentication provider
  - [query-client.tsx](mdc:src/components/providers/query-client.tsx) - React Query setup
  - [default.tsx](mdc:src/components/providers/default.tsx) - Combined providers wrapper

#### Pages
- `src/pages/` - Route-based page components
  - [Index.tsx](mdc:src/pages/Index.tsx) - Home page
  - [auth/Callback.tsx](mdc:src/pages/auth/Callback.tsx) - OIDC callback handler
  - `dashboard/`, `employees/`, `payroll/`, etc. - Feature pages

#### Hooks
- [src/hooks/use-auth.ts](mdc:src/hooks/use-auth.ts) - Authentication hooks
- [src/hooks/use-convex-mutation.ts](mdc:src/hooks/use-convex-mutation.ts) - Convex mutations
- [src/hooks/use-branch.ts](mdc:src/hooks/use-branch.ts) - Branch context

#### Libraries
- [src/lib/convex.ts](mdc:src/lib/convex.ts) - Convex client configuration
- [src/lib/utils.ts](mdc:src/lib/utils.ts) - Utility functions
- [src/lib/pdf-export.ts](mdc:src/lib/pdf-export.ts) - PDF generation

#### Styles
- [src/index.css](mdc:src/index.css) - Global styles and Tailwind imports

### Backend (Convex)
- `convex/` - Convex backend functions
  - [schema.ts](mdc:convex/schema.ts) - Database schema
  - [auth.config.js](mdc:convex/auth.config.js) - Authentication configuration
  - Various `.ts` files - Queries, mutations, actions
  - `_generated/` - Auto-generated Convex types

### Public Assets
- `public/` - Static files served at root
  - [_redirects](mdc:public/_redirects) - SPA routing for Cloudflare Pages

### Documentation
- [CLOUDFLARE_PAGES_SETUP.md](mdc:CLOUDFLARE_PAGES_SETUP.md) - Deployment guide
- [DEPLOYMENT_CHECKLIST.md](mdc:DEPLOYMENT_CHECKLIST.md) - Pre-deploy checklist
- [EMAIL_SETTINGS_GUIDE.md](mdc:EMAIL_SETTINGS_GUIDE.md) - Email configuration
- [PAYROLL_GUIDE.md](mdc:PAYROLL_GUIDE.md) - Payroll feature docs

## Key Features

### Authentication Flow
1. User clicks sign-in → [src/components/ui/signin.tsx](mdc:src/components/ui/signin.tsx)
2. OIDC redirect → configured in [src/components/providers/auth.tsx](mdc:src/components/providers/auth.tsx)
3. Provider callback → [src/pages/auth/Callback.tsx](mdc:src/pages/auth/Callback.tsx)
4. Token stored → `react-oidc-context` handles storage
5. Convex uses token → [src/lib/convex.ts](mdc:src/lib/convex.ts)

### Data Flow
1. UI components call Convex queries/mutations via hooks
2. Convex validates auth token server-side
3. Database operations performed in `convex/*.ts` files
4. Results returned to UI via React Query

### Build Process
1. TypeScript compilation → `tsc -b`
2. Vite bundling → `vite build`
3. Output → `dist/` directory
4. Deploy → Cloudflare Pages reads `dist/`

## Environment-Specific Behavior

### Development (`npm run dev`)
- Hot module replacement
- Source maps enabled
- Fallback to localhost for missing env vars
- CORS may need configuration

### Production (Cloudflare Pages)
- Minified bundles
- No source maps
- Strict environment variable requirements
- SPA routing via [public/_redirects](mdc:public/_redirects)

## Critical Dependencies

### Core
- `react`, `react-dom` - UI framework
- `convex` - Backend client
- `react-oidc-context`, `oidc-client-ts` - Authentication
- `react-router-dom` - Client-side routing

### UI
- `@radix-ui/*` - Headless UI components
- `tailwindcss` - Styling framework
- `lucide-react` - Icons

### Build Tools
- `vite` - Build tool
- `typescript` - Type checking
- `@vitejs/plugin-react-swc` - Fast React refresh

### Analytics (Optional)
- `@usehercules/vite` - Hercules analytics plugin

## Common Patterns

### Adding a New Page
1. Create component in `src/pages/your-feature/page.tsx`
2. Add route in [src/App.tsx](mdc:src/App.tsx)
3. Add navigation link in [src/components/navbar.tsx](mdc:src/components/navbar.tsx)
4. Create Convex backend functions in `convex/your-feature.ts`

### Adding Environment Variable
1. Add to `.env.local` for development
2. Add to Cloudflare Pages environment variables
3. Access via `import.meta.env.VITE_YOUR_VAR`
4. Document in [.cursor/rules/environment-variables.mdc](mdc:.cursor/rules/environment-variables.mdc)

### Debugging Issues
1. Check browser console for runtime errors
2. Check Cloudflare Pages build logs for build errors
3. Verify environment variables are set
4. Refer to [.cursor/rules/debugging-production-errors.mdc](mdc:.cursor/rules/debugging-production-errors.mdc)
